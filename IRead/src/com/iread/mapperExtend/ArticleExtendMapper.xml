<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.iread.mapperExtend.ArticleExtendMapper">

	<resultMap id="BaseResultMap" type="com.iread.pojo.Article">
		<id column="id" property="id" jdbcType="CHAR" />
		<result column="user_id" property="userId" jdbcType="CHAR" />
		<result column="title" property="title" jdbcType="VARCHAR" />
		<result column="look_num" property="lookNum" jdbcType="INTEGER" />
		<result column="comment_num" property="commentNum" jdbcType="INTEGER" />
		<result column="like_num" property="likeNum" jdbcType="INTEGER" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="is_visible" property="isVisible" jdbcType="BIT" />
		<result column="is_display" property="isDisplay" jdbcType="BIT" />
		<result column="book_img_path" property="bookImgPath" jdbcType="VARCHAR" />
		<result column="audio_path" property="audioPath" jdbcType="VARCHAR" />
		<result column="audio_duration" property="audioDuration"
			jdbcType="INTEGER" />
		<result column="audio_info" property="audioInfo" jdbcType="VARCHAR" />
		<result column="abstract_info" property="abstractInfo"
			jdbcType="VARCHAR" />
	</resultMap>

	<!-- 查询通用文章列表的resultMap，包含文章数据，以及文章对应的用户信息 -->
	<resultMap type="com.iread.pojoExtend.ArticleCustom" id="ArticleCommonListResultMap"
		extends="BaseResultMap">
		<!-- 映射用户信息,一对一映射，每篇文章对应一个用户信息
		-->
		<association property="user" javaType="com.iread.pojo.User">
			<id column="user_id" property="id"/>
			<result column="icon" property="icon"/>
			<result column="username" property="username"/>
		</association>
	</resultMap>

	<select id="findArticleList" resultMap="ArticleCommonListResultMap">
		SELECT article.id, article.user_id, article.title, article.abstract_info,
		article.book_img_path, article.audio_path, article.audio_duration,article.audio_info,
		article.create_time, article.look_num,
		COUNT(`comment`.id) as comment_num, COUNT(collect.create_time) as like_num,
		`user`.icon, `user`.username
		FROM article LEFT JOIN `comment` ON article.id = `comment`.subject_id 
		LEFT JOIN collect ON article.id = collect.subject_id
		LEFT JOIN `user` ON article.user_id = `user`.id
		GROUP BY article.id
		ORDER BY article.create_time DESC
	</select>

</mapper>